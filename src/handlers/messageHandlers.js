const { BOT_STATES, keyboard } = require("../config");
const { userSessions } = require("../bot");
const { refreshToken } = require("../auth");
const { checkDeadlines } = require("./taskHandlers");
const { isValidTime, scheduleReminder } = require("../reminders");

async function sendInstructions(bot, chatId) {
  const instructions = `
üìã <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º:</b>

üîë <b>/start</b> - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ (–≤–≤–æ–¥ email –∏ –ø–∞—Ä–æ–ª—è).
üìÖ <b>/tasks</b> - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Å—Ä–æ–∫–∏.
üîî <b>/reminder</b> - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö (–≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è).
üö´ <b>/stopreminder</b> - –û—Ç–∫–ª—é—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
üîí <b>/logout</b> - –í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã –∏ —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /tasks!
  `;
  await bot.sendMessage(chatId, instructions, {
    parse_mode: "HTML",
    ...keyboard,
  });
}

function setupMessageHandlers(bot) {
  bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;

    if (userSessions[chatId]?.token) {
      await sendInstructions(bot, chatId);
      return;
    }

    userSessions[chatId] = { state: BOT_STATES.WAITING_EMAIL };
    await bot.sendMessage(
      chatId,
      "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email –æ—Ç –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã IThub:"
    );
  });

  bot.onText(/\/reminder/, async (msg) => {
    const chatId = msg.chat.id;

    if (!userSessions[chatId]?.token) {
      await bot.sendMessage(
        chatId,
        "üîê –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
      );
      return;
    }

    userSessions[chatId].state = BOT_STATES.WAITING_REMINDER_TIME;
    await bot.sendMessage(
      chatId,
      "‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):",
      keyboard
    );
  });

  bot.onText(/\/stopreminder/, async (msg) => {
    const chatId = msg.chat.id;

    if (!userSessions[chatId]?.token) {
      await bot.sendMessage(
        chatId,
        "üîê –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
      );
      return;
    }

    if (userSessions[chatId]?.reminder?.cronTask) {
      userSessions[chatId].reminder.cronTask.destroy();
      delete userSessions[chatId].reminder;
      await bot.sendMessage(
        chatId,
        "üîî –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.",
        keyboard
      );
    } else {
      await bot.sendMessage(
        chatId,
        "‚ÑπÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –±—ã–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.",
        keyboard
      );
    }
  });

  bot.onText(/\/tasks/, async (msg) => {
    const chatId = msg.chat.id;

    if (!userSessions[chatId]?.token) {
      await bot.sendMessage(
        chatId,
        "üîê –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
      );
      return;
    }

    await checkDeadlines(bot, chatId);
  });

  bot.onText(/\/logout/, async (msg) => {
    const chatId = msg.chat.id;

    if (userSessions[chatId]) {
      if (userSessions[chatId].reminder?.cronTask) {
        userSessions[chatId].reminder.cronTask.destroy();
      }
      delete userSessions[chatId];
      await bot.sendMessage(
        chatId,
        "üîí –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã. –î–ª—è –≤—Ö–æ–¥–∞ —Å–Ω–æ–≤–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start."
      );
    } else {
      await bot.sendMessage(chatId, "‚ÑπÔ∏è –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.");
    }
  });

  bot.on("message", async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    if (text.startsWith("/")) return;

    const session = userSessions[chatId] || { state: BOT_STATES.IDLE };

    try {
      if (session.state === BOT_STATES.WAITING_EMAIL) {
        if (!text.includes("@") || !text.includes(".")) {
          await bot.sendMessage(
            chatId,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email:"
          );
          return;
        }

        userSessions[chatId] = {
          ...session,
          state: BOT_STATES.WAITING_PASSWORD,
          credentials: { email: text.trim() },
        };
        await bot.sendMessage(chatId, "üîë –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:");
      } else if (session.state === BOT_STATES.WAITING_PASSWORD) {
        if (text.length < 4) {
          await bot.sendMessage(
            chatId,
            "‚ùå –ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å:"
          );
          return;
        }

        await bot.sendMessage(chatId, "‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ...");

        try {
          const email = session.credentials.email;
          await refreshToken(chatId, email, text.trim());

          await bot.sendMessage(chatId, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!");
          await sendInstructions(bot, chatId);
        } catch (error) {
          delete userSessions[chatId];
          await bot.sendMessage(
            chatId,
            "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start."
          );
        }
      } else if (session.state === BOT_STATES.WAITING_REMINDER_TIME) {
        if (!isValidTime(text)) {
          await bot.sendMessage(
            chatId,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):",
            keyboard
          );
          return;
        }

        scheduleReminder(bot, chatId, text); 
        userSessions[chatId].state = BOT_STATES.IDLE;
        await bot.sendMessage(
          chatId,
          `üîî –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –Ω–∞ ${text}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stopreminder –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è.`,
          keyboard
        );
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
      await bot.sendMessage(
        chatId,
        "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
      );
    }
  });
}

module.exports = { setupMessageHandlers, sendInstructions };