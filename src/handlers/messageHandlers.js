const { BOT_STATES, keyboard, AUTHOR_INFO } = require("../config");
const { userSessions } = require("../bot");
const { refreshToken } = require("../auth");
const { checkDeadlines } = require("./taskHandlers");
const { isValidTime, scheduleReminder } = require("../reminders");

async function sendInstructions(bot, chatId) {
  const instructions = `
üìã <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º:</b>

üîë <b>/start</b> - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ (–≤–≤–æ–¥ email –∏ –ø–∞—Ä–æ–ª—è).
üìÖ <b>/tasks</b> - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–µ —Å—Ä–æ–∫–∏ –∑–∞–¥–∞–Ω–∏–π.
üîî <b>/reminder</b> - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö.
üö´ <b>/stopreminder</b> - –û—Ç–∫–ª—é—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
üë®‚Äçüíª <b>/dev</b> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ –±–æ—Ç–∞.
üîí <b>/logout</b> - –í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã –∏ —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.
‚ÑπÔ∏è <b>/help</b> - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Å–Ω–æ–≤–∞.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /tasks!
  `;
  await bot.sendMessage(chatId, instructions, {
    parse_mode: "HTML",
    ...keyboard,
  });
}

async function sendAuthorInfo(bot, chatId) {
  const authorMessage = `
üéØ <b>IThub Magas Bot</b> - –ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤

<b>üì± –°–æ–∑–¥–∞—Ç–µ–ª—å:</b>
‚îú‚îÄ <b>–ò–º—è:</b> ${AUTHOR_INFO.name}
‚îú‚îÄ <b>Telegram:</b> ${AUTHOR_INFO.contact}
‚îú‚îÄ <b>Email:</b> ${AUTHOR_INFO.email}
‚îî‚îÄ <b>GitHub:</b> <a href="${AUTHOR_INFO.github}">${AUTHOR_INFO.github}</a>

<b>üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚îú‚îÄ <b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> IThub Colleges
‚îî‚îÄ <b>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:</b> –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö –∑–∞–¥–∞–Ω–∏–π

üí° <i>–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –ø–∏—à–∏—Ç–µ –∞–≤—Ç–æ—Ä—É!</i>
  `;

  await bot.sendMessage(chatId, authorMessage, {
    parse_mode: "HTML",
    disable_web_page_preview: true,
    ...keyboard,
  });
}

async function sendWelcomeMessage(bot, chatId) {
  const welcomeMessage = `
üéì <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ IThub Magas Bot!</b>

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:
‚úÖ –°–ª–µ–¥–∏—Ç—å –∑–∞ –¥–µ–¥–ª–∞–π–Ω–∞–º–∏ –∑–∞–¥–∞–Ω–∏–π
‚úÖ –ü–æ–ª—É—á–∞—Ç—å —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚úÖ –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –≤–∞–∂–Ω—ã–µ —Å—Ä–æ–∫–∏ —Å–¥–∞—á–∏

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email –æ—Ç –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã IThub:
  `;

  await bot.sendMessage(chatId, welcomeMessage, {
    parse_mode: "HTML"
  });
}

function setupMessageHandlers(bot) {
  
  bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;

    if (userSessions[chatId]?.token) {
      await sendInstructions(bot, chatId);
      return;
    }

    userSessions[chatId] = { state: BOT_STATES.WAITING_EMAIL };
    await sendWelcomeMessage(bot, chatId);
  });

  
  bot.onText(/\/help/, async (msg) => {
    const chatId = msg.chat.id;
    await sendInstructions(bot, chatId);
  });

  
  bot.onText(/\/dev/, async (msg) => {
    const chatId = msg.chat.id;
    await sendAuthorInfo(bot, chatId);
  });

  
  bot.onText(/\/reminder/, async (msg) => {
    const chatId = msg.chat.id;

    if (!userSessions[chatId]?.token) {
      await bot.sendMessage(
        chatId,
        "üîê –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
        keyboard
      );
      return;
    }

    userSessions[chatId].state = BOT_STATES.WAITING_REMINDER_TIME;
    await bot.sendMessage(
      chatId,
      "‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):\n\nüìÖ –ë–æ—Ç –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –¥–µ–¥–ª–∞–π–Ω—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.",
      keyboard
    );
  });

  
  bot.onText(/\/stopreminder/, async (msg) => {
    const chatId = msg.chat.id;

    if (!userSessions[chatId]?.token) {
      await bot.sendMessage(
        chatId,
        "üîê –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
        keyboard
      );
      return;
    }

    if (userSessions[chatId]?.reminder?.cronTask) {
      userSessions[chatId].reminder.cronTask.destroy();
      delete userSessions[chatId].reminder;
      await bot.sendMessage(
        chatId,
        "üîî –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã. –í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.",
        keyboard
      );
    } else {
      await bot.sendMessage(
        chatId,
        "‚ÑπÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –±—ã–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reminder —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏—Ö.",
        keyboard
      );
    }
  });

  
  bot.onText(/\/tasks/, async (msg) => {
    const chatId = msg.chat.id;

    if (!userSessions[chatId]?.token) {
      await bot.sendMessage(
        chatId,
        "üîê –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
        keyboard
      );
      return;
    }

    await bot.sendMessage(chatId, "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏—è—Ö...", keyboard);
    await checkDeadlines(bot, chatId);
  });

  
  bot.onText(/\/logout/, async (msg) => {
    const chatId = msg.chat.id;

    if (userSessions[chatId]) {
      if (userSessions[chatId].reminder?.cronTask) {
        userSessions[chatId].reminder.cronTask.destroy();
      }
      delete userSessions[chatId];
      await bot.sendMessage(
        chatId,
        "üîí –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã. –í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —É–¥–∞–ª–µ–Ω—ã.\n\n–î–ª—è –≤—Ö–æ–¥–∞ —Å–Ω–æ–≤–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start."
      );
    } else {
      await bot.sendMessage(chatId, "‚ÑπÔ∏è –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤—Ö–æ–¥–∞.");
    }
  });

  
  bot.on("message", async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    
    if (text.startsWith("/") || !text.trim()) return;

    const session = userSessions[chatId] || { state: BOT_STATES.IDLE };

    try {
      
      if (session.state === BOT_STATES.WAITING_EMAIL) {
        const email = text.trim();
        
        if (!email.includes("@") || !email.includes(".") || email.length < 5) {
          await bot.sendMessage(
            chatId,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –æ—Ç –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã IThub:"
          );
          return;
        }

        userSessions[chatId] = {
          ...session,
          state: BOT_STATES.WAITING_PASSWORD,
          credentials: { email: email.toLowerCase() }, 
        };
        
        await bot.sendMessage(
          chatId,
          "üîë –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:\n\n‚ö†Ô∏è <b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b> –í–∞—à –ø–∞—Ä–æ–ª—å –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞.",
          { parse_mode: "HTML" }
        );
      
      
      } else if (session.state === BOT_STATES.WAITING_PASSWORD) {
        const password = text.trim();
        
        if (password.length < 4) {
          await bot.sendMessage(
            chatId,
            "‚ùå –ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å:"
          );
          return;
        }

        await bot.sendMessage(chatId, "‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ...");

        try {
          const email = session.credentials.email;
          await refreshToken(chatId, email, password);

          await bot.sendMessage(
            chatId,
            "‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!</b>\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.",
            { parse_mode: "HTML", ...keyboard }
          );
          await sendInstructions(bot, chatId);
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", error);
          delete userSessions[chatId];
          
          let errorMessage = "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. ";
          if (error.response?.data?.errors?.[0]?.message) {
            errorMessage += error.response.data.errors[0].message;
          } else {
            errorMessage += "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å.";
          }
          
          errorMessage += "\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start.";
          
          await bot.sendMessage(chatId, errorMessage);
        }
      
      
      } else if (session.state === BOT_STATES.WAITING_REMINDER_TIME) {
        const time = text.trim();
        
        if (!isValidTime(time)) {
          await bot.sendMessage(
            chatId,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:30 –∏–ª–∏ 14:45):",
            keyboard
          );
          return;
        }

        scheduleReminder(bot, chatId, time);
        userSessions[chatId].state = BOT_STATES.IDLE;
        
        await bot.sendMessage(
          chatId,
          `‚úÖ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –Ω–∞ ${time}</b>\n\nüìÖ –ë–æ—Ç –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –¥–µ–¥–ª–∞–π–Ω—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —ç—Ç–æ –≤—Ä–µ–º—è –∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stopreminder –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.`,
          { parse_mode: "HTML", ...keyboard }
        );
      
      
      } else {
        await bot.sendMessage(
          chatId,
          "ü§î –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
          keyboard
        );
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
      await bot.sendMessage(
        chatId,
        "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.",
        keyboard
      );
    }
  });

  
  bot.on("polling_error", (error) => {
    console.error("Polling error:", error);
  });

  bot.on("webhook_error", (error) => {
    console.error("Webhook error:", error);
  });

  console.log("‚úÖ Message handlers setup completed");
}

module.exports = { 
  setupMessageHandlers, 
  sendInstructions, 
  sendAuthorInfo,
  sendWelcomeMessage 
};