const { keyboard } = require("../config");
const { userSessions } = require("../bot");
const { refreshToken } = require("../auth");
const { getTasksWithDeadlines, getDayText, getHourText } = require("../tasks");

async function checkDeadlines(bot, chatId) {
  try {
    let session = userSessions[chatId];

    if (!session) {
      await bot.sendMessage(
        chatId,
        "üîê –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
      );
      return;
    }

    if (new Date() - new Date(session.lastRefreshed) > 12 * 60 * 60 * 1000) {
      try {
        await refreshToken(
          chatId,
          session.credentials.email,
          session.credentials.password
        );
        session = userSessions[chatId];
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:", error);
        if (userSessions[chatId]?.reminder?.cronTask) {
          userSessions[chatId].reminder.cronTask.destroy();
        }
        delete userSessions[chatId];
        await bot.sendMessage(
          chatId,
          "üîê –í–∞—à–∞ —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é /start."
        );
        return;
      }
    }

    const tasks = await getTasksWithDeadlines(session.token, session.studentId);
    const now = new Date();

    const sortedTasks = tasks
      .filter((task) => task.deadline > now)
      .sort((a, b) => a.deadline - b.deadline);

    if (sortedTasks.length > 0) {
      let message = "<b>–í–∞—à–∏ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏–µ—Å—è —Å—Ä–æ–∫–∏:</b>\n\n";

      sortedTasks.forEach((task) => {
        const hoursLeft = Math.ceil((task.deadline - now) / (1000 * 60 * 60));
        let timeLeftText;

        if (hoursLeft < 24) {
          timeLeftText = `–û—Å—Ç–∞–ª–æ—Å—å: ${hoursLeft} ${getHourText(hoursLeft)}`;
        } else {
          const daysLeft = Math.ceil(hoursLeft / 24);
          timeLeftText = `–û—Å—Ç–∞–ª–æ—Å—å: ${daysLeft} ${getDayText(daysLeft)}`;
        }
        message += `<b>${task.discipline}</b>\n`;
        message += `${task.name} \n`;
        message += `–¢–µ–º–∞: ${task.topic}\n`;
        message += `${timeLeftText}\n`;
        message += `–°—Ä–æ–∫: ${task.deadline.toLocaleString("ru-RU", {
          day: "numeric",
          month: "long",
          year: "numeric",
          hour: "2-digit",
          minute: "2-digit",
        })}\n`;
        if (task.link) {
          message += `<a href="${task.link}">–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á</a>\n-------------------------\n\n\n`;
        } else {
          message += `\n`;
        }
      });

      await bot.sendMessage(chatId, message, {
        parse_mode: "HTML",
        ...keyboard,
      });
    } else {
      await bot.sendMessage(
        chatId,
        "‚úÖ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å—Ä–æ–∫–æ–≤ –Ω–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∞–π—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.",
        keyboard
      );
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–µ–¥–ª–∞–π–Ω–æ–≤:", error);
    try {
      const session = userSessions[chatId];
      if (session?.credentials?.email && session?.credentials?.password) {
        await refreshToken(
          chatId,
          session.credentials.email,
          session.credentials.password
        );
        await checkDeadlines(bot, chatId);
      } else {
        throw new Error("–ù–µ—Ç —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞");
      }
    } catch (refreshError) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:", refreshError);
      if (userSessions[chatId]?.reminder?.cronTask) {
        userSessions[chatId].reminder.cronTask.destroy();
      }
      delete userSessions[chatId];
      await bot.sendMessage(
        chatId,
        "üîê –í–∞—à–∞ —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å–Ω–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é /start."
      );
    }
  }
}

module.exports = { checkDeadlines };